// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/25/2019 18:16:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    AES_TOP
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AES_TOP_vlg_sample_tst(
	clk,
	startin,
	sampler_tx
);
input  clk;
input [127:0] startin;
output sampler_tx;

reg sample;
time current_time;
always @(clk or startin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module AES_TOP_vlg_check_tst (
	finalout,
	sampler_rx
);
input [127:0] finalout;
input sampler_rx;

reg [127:0] finalout_expected;

reg [127:0] finalout_prev;

reg [127:0] finalout_expected_prev;

reg [127:0] last_finalout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	finalout_prev = finalout;
end

// update expected /o prevs

always @(trigger)
begin
	finalout_expected_prev = finalout_expected;
end


// expected finalout[ 127 ]
initial
begin
	finalout_expected[127] = 1'bX;
end 
// expected finalout[ 126 ]
initial
begin
	finalout_expected[126] = 1'bX;
end 
// expected finalout[ 125 ]
initial
begin
	finalout_expected[125] = 1'bX;
end 
// expected finalout[ 124 ]
initial
begin
	finalout_expected[124] = 1'bX;
end 
// expected finalout[ 123 ]
initial
begin
	finalout_expected[123] = 1'bX;
end 
// expected finalout[ 122 ]
initial
begin
	finalout_expected[122] = 1'bX;
end 
// expected finalout[ 121 ]
initial
begin
	finalout_expected[121] = 1'bX;
end 
// expected finalout[ 120 ]
initial
begin
	finalout_expected[120] = 1'bX;
end 
// expected finalout[ 119 ]
initial
begin
	finalout_expected[119] = 1'bX;
end 
// expected finalout[ 118 ]
initial
begin
	finalout_expected[118] = 1'bX;
end 
// expected finalout[ 117 ]
initial
begin
	finalout_expected[117] = 1'bX;
end 
// expected finalout[ 116 ]
initial
begin
	finalout_expected[116] = 1'bX;
end 
// expected finalout[ 115 ]
initial
begin
	finalout_expected[115] = 1'bX;
end 
// expected finalout[ 114 ]
initial
begin
	finalout_expected[114] = 1'bX;
end 
// expected finalout[ 113 ]
initial
begin
	finalout_expected[113] = 1'bX;
end 
// expected finalout[ 112 ]
initial
begin
	finalout_expected[112] = 1'bX;
end 
// expected finalout[ 111 ]
initial
begin
	finalout_expected[111] = 1'bX;
end 
// expected finalout[ 110 ]
initial
begin
	finalout_expected[110] = 1'bX;
end 
// expected finalout[ 109 ]
initial
begin
	finalout_expected[109] = 1'bX;
end 
// expected finalout[ 108 ]
initial
begin
	finalout_expected[108] = 1'bX;
end 
// expected finalout[ 107 ]
initial
begin
	finalout_expected[107] = 1'bX;
end 
// expected finalout[ 106 ]
initial
begin
	finalout_expected[106] = 1'bX;
end 
// expected finalout[ 105 ]
initial
begin
	finalout_expected[105] = 1'bX;
end 
// expected finalout[ 104 ]
initial
begin
	finalout_expected[104] = 1'bX;
end 
// expected finalout[ 103 ]
initial
begin
	finalout_expected[103] = 1'bX;
end 
// expected finalout[ 102 ]
initial
begin
	finalout_expected[102] = 1'bX;
end 
// expected finalout[ 101 ]
initial
begin
	finalout_expected[101] = 1'bX;
end 
// expected finalout[ 100 ]
initial
begin
	finalout_expected[100] = 1'bX;
end 
// expected finalout[ 99 ]
initial
begin
	finalout_expected[99] = 1'bX;
end 
// expected finalout[ 98 ]
initial
begin
	finalout_expected[98] = 1'bX;
end 
// expected finalout[ 97 ]
initial
begin
	finalout_expected[97] = 1'bX;
end 
// expected finalout[ 96 ]
initial
begin
	finalout_expected[96] = 1'bX;
end 
// expected finalout[ 95 ]
initial
begin
	finalout_expected[95] = 1'bX;
end 
// expected finalout[ 94 ]
initial
begin
	finalout_expected[94] = 1'bX;
end 
// expected finalout[ 93 ]
initial
begin
	finalout_expected[93] = 1'bX;
end 
// expected finalout[ 92 ]
initial
begin
	finalout_expected[92] = 1'bX;
end 
// expected finalout[ 91 ]
initial
begin
	finalout_expected[91] = 1'bX;
end 
// expected finalout[ 90 ]
initial
begin
	finalout_expected[90] = 1'bX;
end 
// expected finalout[ 89 ]
initial
begin
	finalout_expected[89] = 1'bX;
end 
// expected finalout[ 88 ]
initial
begin
	finalout_expected[88] = 1'bX;
end 
// expected finalout[ 87 ]
initial
begin
	finalout_expected[87] = 1'bX;
end 
// expected finalout[ 86 ]
initial
begin
	finalout_expected[86] = 1'bX;
end 
// expected finalout[ 85 ]
initial
begin
	finalout_expected[85] = 1'bX;
end 
// expected finalout[ 84 ]
initial
begin
	finalout_expected[84] = 1'bX;
end 
// expected finalout[ 83 ]
initial
begin
	finalout_expected[83] = 1'bX;
end 
// expected finalout[ 82 ]
initial
begin
	finalout_expected[82] = 1'bX;
end 
// expected finalout[ 81 ]
initial
begin
	finalout_expected[81] = 1'bX;
end 
// expected finalout[ 80 ]
initial
begin
	finalout_expected[80] = 1'bX;
end 
// expected finalout[ 79 ]
initial
begin
	finalout_expected[79] = 1'bX;
end 
// expected finalout[ 78 ]
initial
begin
	finalout_expected[78] = 1'bX;
end 
// expected finalout[ 77 ]
initial
begin
	finalout_expected[77] = 1'bX;
end 
// expected finalout[ 76 ]
initial
begin
	finalout_expected[76] = 1'bX;
end 
// expected finalout[ 75 ]
initial
begin
	finalout_expected[75] = 1'bX;
end 
// expected finalout[ 74 ]
initial
begin
	finalout_expected[74] = 1'bX;
end 
// expected finalout[ 73 ]
initial
begin
	finalout_expected[73] = 1'bX;
end 
// expected finalout[ 72 ]
initial
begin
	finalout_expected[72] = 1'bX;
end 
// expected finalout[ 71 ]
initial
begin
	finalout_expected[71] = 1'bX;
end 
// expected finalout[ 70 ]
initial
begin
	finalout_expected[70] = 1'bX;
end 
// expected finalout[ 69 ]
initial
begin
	finalout_expected[69] = 1'bX;
end 
// expected finalout[ 68 ]
initial
begin
	finalout_expected[68] = 1'bX;
end 
// expected finalout[ 67 ]
initial
begin
	finalout_expected[67] = 1'bX;
end 
// expected finalout[ 66 ]
initial
begin
	finalout_expected[66] = 1'bX;
end 
// expected finalout[ 65 ]
initial
begin
	finalout_expected[65] = 1'bX;
end 
// expected finalout[ 64 ]
initial
begin
	finalout_expected[64] = 1'bX;
end 
// expected finalout[ 63 ]
initial
begin
	finalout_expected[63] = 1'bX;
end 
// expected finalout[ 62 ]
initial
begin
	finalout_expected[62] = 1'bX;
end 
// expected finalout[ 61 ]
initial
begin
	finalout_expected[61] = 1'bX;
end 
// expected finalout[ 60 ]
initial
begin
	finalout_expected[60] = 1'bX;
end 
// expected finalout[ 59 ]
initial
begin
	finalout_expected[59] = 1'bX;
end 
// expected finalout[ 58 ]
initial
begin
	finalout_expected[58] = 1'bX;
end 
// expected finalout[ 57 ]
initial
begin
	finalout_expected[57] = 1'bX;
end 
// expected finalout[ 56 ]
initial
begin
	finalout_expected[56] = 1'bX;
end 
// expected finalout[ 55 ]
initial
begin
	finalout_expected[55] = 1'bX;
end 
// expected finalout[ 54 ]
initial
begin
	finalout_expected[54] = 1'bX;
end 
// expected finalout[ 53 ]
initial
begin
	finalout_expected[53] = 1'bX;
end 
// expected finalout[ 52 ]
initial
begin
	finalout_expected[52] = 1'bX;
end 
// expected finalout[ 51 ]
initial
begin
	finalout_expected[51] = 1'bX;
end 
// expected finalout[ 50 ]
initial
begin
	finalout_expected[50] = 1'bX;
end 
// expected finalout[ 49 ]
initial
begin
	finalout_expected[49] = 1'bX;
end 
// expected finalout[ 48 ]
initial
begin
	finalout_expected[48] = 1'bX;
end 
// expected finalout[ 47 ]
initial
begin
	finalout_expected[47] = 1'bX;
end 
// expected finalout[ 46 ]
initial
begin
	finalout_expected[46] = 1'bX;
end 
// expected finalout[ 45 ]
initial
begin
	finalout_expected[45] = 1'bX;
end 
// expected finalout[ 44 ]
initial
begin
	finalout_expected[44] = 1'bX;
end 
// expected finalout[ 43 ]
initial
begin
	finalout_expected[43] = 1'bX;
end 
// expected finalout[ 42 ]
initial
begin
	finalout_expected[42] = 1'bX;
end 
// expected finalout[ 41 ]
initial
begin
	finalout_expected[41] = 1'bX;
end 
// expected finalout[ 40 ]
initial
begin
	finalout_expected[40] = 1'bX;
end 
// expected finalout[ 39 ]
initial
begin
	finalout_expected[39] = 1'bX;
end 
// expected finalout[ 38 ]
initial
begin
	finalout_expected[38] = 1'bX;
end 
// expected finalout[ 37 ]
initial
begin
	finalout_expected[37] = 1'bX;
end 
// expected finalout[ 36 ]
initial
begin
	finalout_expected[36] = 1'bX;
end 
// expected finalout[ 35 ]
initial
begin
	finalout_expected[35] = 1'bX;
end 
// expected finalout[ 34 ]
initial
begin
	finalout_expected[34] = 1'bX;
end 
// expected finalout[ 33 ]
initial
begin
	finalout_expected[33] = 1'bX;
end 
// expected finalout[ 32 ]
initial
begin
	finalout_expected[32] = 1'bX;
end 
// expected finalout[ 31 ]
initial
begin
	finalout_expected[31] = 1'bX;
end 
// expected finalout[ 30 ]
initial
begin
	finalout_expected[30] = 1'bX;
end 
// expected finalout[ 29 ]
initial
begin
	finalout_expected[29] = 1'bX;
end 
// expected finalout[ 28 ]
initial
begin
	finalout_expected[28] = 1'bX;
end 
// expected finalout[ 27 ]
initial
begin
	finalout_expected[27] = 1'bX;
end 
// expected finalout[ 26 ]
initial
begin
	finalout_expected[26] = 1'bX;
end 
// expected finalout[ 25 ]
initial
begin
	finalout_expected[25] = 1'bX;
end 
// expected finalout[ 24 ]
initial
begin
	finalout_expected[24] = 1'bX;
end 
// expected finalout[ 23 ]
initial
begin
	finalout_expected[23] = 1'bX;
end 
// expected finalout[ 22 ]
initial
begin
	finalout_expected[22] = 1'bX;
end 
// expected finalout[ 21 ]
initial
begin
	finalout_expected[21] = 1'bX;
end 
// expected finalout[ 20 ]
initial
begin
	finalout_expected[20] = 1'bX;
end 
// expected finalout[ 19 ]
initial
begin
	finalout_expected[19] = 1'bX;
end 
// expected finalout[ 18 ]
initial
begin
	finalout_expected[18] = 1'bX;
end 
// expected finalout[ 17 ]
initial
begin
	finalout_expected[17] = 1'bX;
end 
// expected finalout[ 16 ]
initial
begin
	finalout_expected[16] = 1'bX;
end 
// expected finalout[ 15 ]
initial
begin
	finalout_expected[15] = 1'bX;
end 
// expected finalout[ 14 ]
initial
begin
	finalout_expected[14] = 1'bX;
end 
// expected finalout[ 13 ]
initial
begin
	finalout_expected[13] = 1'bX;
end 
// expected finalout[ 12 ]
initial
begin
	finalout_expected[12] = 1'bX;
end 
// expected finalout[ 11 ]
initial
begin
	finalout_expected[11] = 1'bX;
end 
// expected finalout[ 10 ]
initial
begin
	finalout_expected[10] = 1'bX;
end 
// expected finalout[ 9 ]
initial
begin
	finalout_expected[9] = 1'bX;
end 
// expected finalout[ 8 ]
initial
begin
	finalout_expected[8] = 1'bX;
end 
// expected finalout[ 7 ]
initial
begin
	finalout_expected[7] = 1'bX;
end 
// expected finalout[ 6 ]
initial
begin
	finalout_expected[6] = 1'bX;
end 
// expected finalout[ 5 ]
initial
begin
	finalout_expected[5] = 1'bX;
end 
// expected finalout[ 4 ]
initial
begin
	finalout_expected[4] = 1'bX;
end 
// expected finalout[ 3 ]
initial
begin
	finalout_expected[3] = 1'bX;
end 
// expected finalout[ 2 ]
initial
begin
	finalout_expected[2] = 1'bX;
end 
// expected finalout[ 1 ]
initial
begin
	finalout_expected[1] = 1'bX;
end 
// expected finalout[ 0 ]
initial
begin
	finalout_expected[0] = 1'bX;
end 
// generate trigger
always @(finalout_expected or finalout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected finalout = %b | ",finalout_expected_prev);
	$display("| real finalout = %b | ",finalout_prev);
`endif
	if (
		( finalout_expected_prev[0] !== 1'bx ) && ( finalout_prev[0] !== finalout_expected_prev[0] )
		&& ((finalout_expected_prev[0] !== last_finalout_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[0] = finalout_expected_prev[0];
	end
	if (
		( finalout_expected_prev[1] !== 1'bx ) && ( finalout_prev[1] !== finalout_expected_prev[1] )
		&& ((finalout_expected_prev[1] !== last_finalout_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[1] = finalout_expected_prev[1];
	end
	if (
		( finalout_expected_prev[2] !== 1'bx ) && ( finalout_prev[2] !== finalout_expected_prev[2] )
		&& ((finalout_expected_prev[2] !== last_finalout_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[2] = finalout_expected_prev[2];
	end
	if (
		( finalout_expected_prev[3] !== 1'bx ) && ( finalout_prev[3] !== finalout_expected_prev[3] )
		&& ((finalout_expected_prev[3] !== last_finalout_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[3] = finalout_expected_prev[3];
	end
	if (
		( finalout_expected_prev[4] !== 1'bx ) && ( finalout_prev[4] !== finalout_expected_prev[4] )
		&& ((finalout_expected_prev[4] !== last_finalout_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[4] = finalout_expected_prev[4];
	end
	if (
		( finalout_expected_prev[5] !== 1'bx ) && ( finalout_prev[5] !== finalout_expected_prev[5] )
		&& ((finalout_expected_prev[5] !== last_finalout_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[5] = finalout_expected_prev[5];
	end
	if (
		( finalout_expected_prev[6] !== 1'bx ) && ( finalout_prev[6] !== finalout_expected_prev[6] )
		&& ((finalout_expected_prev[6] !== last_finalout_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[6] = finalout_expected_prev[6];
	end
	if (
		( finalout_expected_prev[7] !== 1'bx ) && ( finalout_prev[7] !== finalout_expected_prev[7] )
		&& ((finalout_expected_prev[7] !== last_finalout_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[7] = finalout_expected_prev[7];
	end
	if (
		( finalout_expected_prev[8] !== 1'bx ) && ( finalout_prev[8] !== finalout_expected_prev[8] )
		&& ((finalout_expected_prev[8] !== last_finalout_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[8] = finalout_expected_prev[8];
	end
	if (
		( finalout_expected_prev[9] !== 1'bx ) && ( finalout_prev[9] !== finalout_expected_prev[9] )
		&& ((finalout_expected_prev[9] !== last_finalout_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[9] = finalout_expected_prev[9];
	end
	if (
		( finalout_expected_prev[10] !== 1'bx ) && ( finalout_prev[10] !== finalout_expected_prev[10] )
		&& ((finalout_expected_prev[10] !== last_finalout_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[10] = finalout_expected_prev[10];
	end
	if (
		( finalout_expected_prev[11] !== 1'bx ) && ( finalout_prev[11] !== finalout_expected_prev[11] )
		&& ((finalout_expected_prev[11] !== last_finalout_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[11] = finalout_expected_prev[11];
	end
	if (
		( finalout_expected_prev[12] !== 1'bx ) && ( finalout_prev[12] !== finalout_expected_prev[12] )
		&& ((finalout_expected_prev[12] !== last_finalout_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[12] = finalout_expected_prev[12];
	end
	if (
		( finalout_expected_prev[13] !== 1'bx ) && ( finalout_prev[13] !== finalout_expected_prev[13] )
		&& ((finalout_expected_prev[13] !== last_finalout_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[13] = finalout_expected_prev[13];
	end
	if (
		( finalout_expected_prev[14] !== 1'bx ) && ( finalout_prev[14] !== finalout_expected_prev[14] )
		&& ((finalout_expected_prev[14] !== last_finalout_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[14] = finalout_expected_prev[14];
	end
	if (
		( finalout_expected_prev[15] !== 1'bx ) && ( finalout_prev[15] !== finalout_expected_prev[15] )
		&& ((finalout_expected_prev[15] !== last_finalout_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[15] = finalout_expected_prev[15];
	end
	if (
		( finalout_expected_prev[16] !== 1'bx ) && ( finalout_prev[16] !== finalout_expected_prev[16] )
		&& ((finalout_expected_prev[16] !== last_finalout_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[16] = finalout_expected_prev[16];
	end
	if (
		( finalout_expected_prev[17] !== 1'bx ) && ( finalout_prev[17] !== finalout_expected_prev[17] )
		&& ((finalout_expected_prev[17] !== last_finalout_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[17] = finalout_expected_prev[17];
	end
	if (
		( finalout_expected_prev[18] !== 1'bx ) && ( finalout_prev[18] !== finalout_expected_prev[18] )
		&& ((finalout_expected_prev[18] !== last_finalout_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[18] = finalout_expected_prev[18];
	end
	if (
		( finalout_expected_prev[19] !== 1'bx ) && ( finalout_prev[19] !== finalout_expected_prev[19] )
		&& ((finalout_expected_prev[19] !== last_finalout_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[19] = finalout_expected_prev[19];
	end
	if (
		( finalout_expected_prev[20] !== 1'bx ) && ( finalout_prev[20] !== finalout_expected_prev[20] )
		&& ((finalout_expected_prev[20] !== last_finalout_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[20] = finalout_expected_prev[20];
	end
	if (
		( finalout_expected_prev[21] !== 1'bx ) && ( finalout_prev[21] !== finalout_expected_prev[21] )
		&& ((finalout_expected_prev[21] !== last_finalout_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[21] = finalout_expected_prev[21];
	end
	if (
		( finalout_expected_prev[22] !== 1'bx ) && ( finalout_prev[22] !== finalout_expected_prev[22] )
		&& ((finalout_expected_prev[22] !== last_finalout_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[22] = finalout_expected_prev[22];
	end
	if (
		( finalout_expected_prev[23] !== 1'bx ) && ( finalout_prev[23] !== finalout_expected_prev[23] )
		&& ((finalout_expected_prev[23] !== last_finalout_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[23] = finalout_expected_prev[23];
	end
	if (
		( finalout_expected_prev[24] !== 1'bx ) && ( finalout_prev[24] !== finalout_expected_prev[24] )
		&& ((finalout_expected_prev[24] !== last_finalout_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[24] = finalout_expected_prev[24];
	end
	if (
		( finalout_expected_prev[25] !== 1'bx ) && ( finalout_prev[25] !== finalout_expected_prev[25] )
		&& ((finalout_expected_prev[25] !== last_finalout_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[25] = finalout_expected_prev[25];
	end
	if (
		( finalout_expected_prev[26] !== 1'bx ) && ( finalout_prev[26] !== finalout_expected_prev[26] )
		&& ((finalout_expected_prev[26] !== last_finalout_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[26] = finalout_expected_prev[26];
	end
	if (
		( finalout_expected_prev[27] !== 1'bx ) && ( finalout_prev[27] !== finalout_expected_prev[27] )
		&& ((finalout_expected_prev[27] !== last_finalout_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[27] = finalout_expected_prev[27];
	end
	if (
		( finalout_expected_prev[28] !== 1'bx ) && ( finalout_prev[28] !== finalout_expected_prev[28] )
		&& ((finalout_expected_prev[28] !== last_finalout_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[28] = finalout_expected_prev[28];
	end
	if (
		( finalout_expected_prev[29] !== 1'bx ) && ( finalout_prev[29] !== finalout_expected_prev[29] )
		&& ((finalout_expected_prev[29] !== last_finalout_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[29] = finalout_expected_prev[29];
	end
	if (
		( finalout_expected_prev[30] !== 1'bx ) && ( finalout_prev[30] !== finalout_expected_prev[30] )
		&& ((finalout_expected_prev[30] !== last_finalout_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[30] = finalout_expected_prev[30];
	end
	if (
		( finalout_expected_prev[31] !== 1'bx ) && ( finalout_prev[31] !== finalout_expected_prev[31] )
		&& ((finalout_expected_prev[31] !== last_finalout_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[31] = finalout_expected_prev[31];
	end
	if (
		( finalout_expected_prev[32] !== 1'bx ) && ( finalout_prev[32] !== finalout_expected_prev[32] )
		&& ((finalout_expected_prev[32] !== last_finalout_exp[32]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[32] = finalout_expected_prev[32];
	end
	if (
		( finalout_expected_prev[33] !== 1'bx ) && ( finalout_prev[33] !== finalout_expected_prev[33] )
		&& ((finalout_expected_prev[33] !== last_finalout_exp[33]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[33] = finalout_expected_prev[33];
	end
	if (
		( finalout_expected_prev[34] !== 1'bx ) && ( finalout_prev[34] !== finalout_expected_prev[34] )
		&& ((finalout_expected_prev[34] !== last_finalout_exp[34]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[34] = finalout_expected_prev[34];
	end
	if (
		( finalout_expected_prev[35] !== 1'bx ) && ( finalout_prev[35] !== finalout_expected_prev[35] )
		&& ((finalout_expected_prev[35] !== last_finalout_exp[35]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[35] = finalout_expected_prev[35];
	end
	if (
		( finalout_expected_prev[36] !== 1'bx ) && ( finalout_prev[36] !== finalout_expected_prev[36] )
		&& ((finalout_expected_prev[36] !== last_finalout_exp[36]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[36] = finalout_expected_prev[36];
	end
	if (
		( finalout_expected_prev[37] !== 1'bx ) && ( finalout_prev[37] !== finalout_expected_prev[37] )
		&& ((finalout_expected_prev[37] !== last_finalout_exp[37]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[37] = finalout_expected_prev[37];
	end
	if (
		( finalout_expected_prev[38] !== 1'bx ) && ( finalout_prev[38] !== finalout_expected_prev[38] )
		&& ((finalout_expected_prev[38] !== last_finalout_exp[38]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[38] = finalout_expected_prev[38];
	end
	if (
		( finalout_expected_prev[39] !== 1'bx ) && ( finalout_prev[39] !== finalout_expected_prev[39] )
		&& ((finalout_expected_prev[39] !== last_finalout_exp[39]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[39] = finalout_expected_prev[39];
	end
	if (
		( finalout_expected_prev[40] !== 1'bx ) && ( finalout_prev[40] !== finalout_expected_prev[40] )
		&& ((finalout_expected_prev[40] !== last_finalout_exp[40]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[40] = finalout_expected_prev[40];
	end
	if (
		( finalout_expected_prev[41] !== 1'bx ) && ( finalout_prev[41] !== finalout_expected_prev[41] )
		&& ((finalout_expected_prev[41] !== last_finalout_exp[41]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[41] = finalout_expected_prev[41];
	end
	if (
		( finalout_expected_prev[42] !== 1'bx ) && ( finalout_prev[42] !== finalout_expected_prev[42] )
		&& ((finalout_expected_prev[42] !== last_finalout_exp[42]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[42] = finalout_expected_prev[42];
	end
	if (
		( finalout_expected_prev[43] !== 1'bx ) && ( finalout_prev[43] !== finalout_expected_prev[43] )
		&& ((finalout_expected_prev[43] !== last_finalout_exp[43]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[43] = finalout_expected_prev[43];
	end
	if (
		( finalout_expected_prev[44] !== 1'bx ) && ( finalout_prev[44] !== finalout_expected_prev[44] )
		&& ((finalout_expected_prev[44] !== last_finalout_exp[44]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[44] = finalout_expected_prev[44];
	end
	if (
		( finalout_expected_prev[45] !== 1'bx ) && ( finalout_prev[45] !== finalout_expected_prev[45] )
		&& ((finalout_expected_prev[45] !== last_finalout_exp[45]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[45] = finalout_expected_prev[45];
	end
	if (
		( finalout_expected_prev[46] !== 1'bx ) && ( finalout_prev[46] !== finalout_expected_prev[46] )
		&& ((finalout_expected_prev[46] !== last_finalout_exp[46]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[46] = finalout_expected_prev[46];
	end
	if (
		( finalout_expected_prev[47] !== 1'bx ) && ( finalout_prev[47] !== finalout_expected_prev[47] )
		&& ((finalout_expected_prev[47] !== last_finalout_exp[47]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[47] = finalout_expected_prev[47];
	end
	if (
		( finalout_expected_prev[48] !== 1'bx ) && ( finalout_prev[48] !== finalout_expected_prev[48] )
		&& ((finalout_expected_prev[48] !== last_finalout_exp[48]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[48] = finalout_expected_prev[48];
	end
	if (
		( finalout_expected_prev[49] !== 1'bx ) && ( finalout_prev[49] !== finalout_expected_prev[49] )
		&& ((finalout_expected_prev[49] !== last_finalout_exp[49]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[49] = finalout_expected_prev[49];
	end
	if (
		( finalout_expected_prev[50] !== 1'bx ) && ( finalout_prev[50] !== finalout_expected_prev[50] )
		&& ((finalout_expected_prev[50] !== last_finalout_exp[50]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[50] = finalout_expected_prev[50];
	end
	if (
		( finalout_expected_prev[51] !== 1'bx ) && ( finalout_prev[51] !== finalout_expected_prev[51] )
		&& ((finalout_expected_prev[51] !== last_finalout_exp[51]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[51] = finalout_expected_prev[51];
	end
	if (
		( finalout_expected_prev[52] !== 1'bx ) && ( finalout_prev[52] !== finalout_expected_prev[52] )
		&& ((finalout_expected_prev[52] !== last_finalout_exp[52]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[52] = finalout_expected_prev[52];
	end
	if (
		( finalout_expected_prev[53] !== 1'bx ) && ( finalout_prev[53] !== finalout_expected_prev[53] )
		&& ((finalout_expected_prev[53] !== last_finalout_exp[53]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[53] = finalout_expected_prev[53];
	end
	if (
		( finalout_expected_prev[54] !== 1'bx ) && ( finalout_prev[54] !== finalout_expected_prev[54] )
		&& ((finalout_expected_prev[54] !== last_finalout_exp[54]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[54] = finalout_expected_prev[54];
	end
	if (
		( finalout_expected_prev[55] !== 1'bx ) && ( finalout_prev[55] !== finalout_expected_prev[55] )
		&& ((finalout_expected_prev[55] !== last_finalout_exp[55]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[55] = finalout_expected_prev[55];
	end
	if (
		( finalout_expected_prev[56] !== 1'bx ) && ( finalout_prev[56] !== finalout_expected_prev[56] )
		&& ((finalout_expected_prev[56] !== last_finalout_exp[56]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[56] = finalout_expected_prev[56];
	end
	if (
		( finalout_expected_prev[57] !== 1'bx ) && ( finalout_prev[57] !== finalout_expected_prev[57] )
		&& ((finalout_expected_prev[57] !== last_finalout_exp[57]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[57] = finalout_expected_prev[57];
	end
	if (
		( finalout_expected_prev[58] !== 1'bx ) && ( finalout_prev[58] !== finalout_expected_prev[58] )
		&& ((finalout_expected_prev[58] !== last_finalout_exp[58]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[58] = finalout_expected_prev[58];
	end
	if (
		( finalout_expected_prev[59] !== 1'bx ) && ( finalout_prev[59] !== finalout_expected_prev[59] )
		&& ((finalout_expected_prev[59] !== last_finalout_exp[59]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[59] = finalout_expected_prev[59];
	end
	if (
		( finalout_expected_prev[60] !== 1'bx ) && ( finalout_prev[60] !== finalout_expected_prev[60] )
		&& ((finalout_expected_prev[60] !== last_finalout_exp[60]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[60] = finalout_expected_prev[60];
	end
	if (
		( finalout_expected_prev[61] !== 1'bx ) && ( finalout_prev[61] !== finalout_expected_prev[61] )
		&& ((finalout_expected_prev[61] !== last_finalout_exp[61]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[61] = finalout_expected_prev[61];
	end
	if (
		( finalout_expected_prev[62] !== 1'bx ) && ( finalout_prev[62] !== finalout_expected_prev[62] )
		&& ((finalout_expected_prev[62] !== last_finalout_exp[62]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[62] = finalout_expected_prev[62];
	end
	if (
		( finalout_expected_prev[63] !== 1'bx ) && ( finalout_prev[63] !== finalout_expected_prev[63] )
		&& ((finalout_expected_prev[63] !== last_finalout_exp[63]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[63] = finalout_expected_prev[63];
	end
	if (
		( finalout_expected_prev[64] !== 1'bx ) && ( finalout_prev[64] !== finalout_expected_prev[64] )
		&& ((finalout_expected_prev[64] !== last_finalout_exp[64]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[64] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[64] = finalout_expected_prev[64];
	end
	if (
		( finalout_expected_prev[65] !== 1'bx ) && ( finalout_prev[65] !== finalout_expected_prev[65] )
		&& ((finalout_expected_prev[65] !== last_finalout_exp[65]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[65] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[65] = finalout_expected_prev[65];
	end
	if (
		( finalout_expected_prev[66] !== 1'bx ) && ( finalout_prev[66] !== finalout_expected_prev[66] )
		&& ((finalout_expected_prev[66] !== last_finalout_exp[66]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[66] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[66] = finalout_expected_prev[66];
	end
	if (
		( finalout_expected_prev[67] !== 1'bx ) && ( finalout_prev[67] !== finalout_expected_prev[67] )
		&& ((finalout_expected_prev[67] !== last_finalout_exp[67]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[67] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[67] = finalout_expected_prev[67];
	end
	if (
		( finalout_expected_prev[68] !== 1'bx ) && ( finalout_prev[68] !== finalout_expected_prev[68] )
		&& ((finalout_expected_prev[68] !== last_finalout_exp[68]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[68] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[68] = finalout_expected_prev[68];
	end
	if (
		( finalout_expected_prev[69] !== 1'bx ) && ( finalout_prev[69] !== finalout_expected_prev[69] )
		&& ((finalout_expected_prev[69] !== last_finalout_exp[69]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[69] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[69] = finalout_expected_prev[69];
	end
	if (
		( finalout_expected_prev[70] !== 1'bx ) && ( finalout_prev[70] !== finalout_expected_prev[70] )
		&& ((finalout_expected_prev[70] !== last_finalout_exp[70]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[70] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[70] = finalout_expected_prev[70];
	end
	if (
		( finalout_expected_prev[71] !== 1'bx ) && ( finalout_prev[71] !== finalout_expected_prev[71] )
		&& ((finalout_expected_prev[71] !== last_finalout_exp[71]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[71] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[71] = finalout_expected_prev[71];
	end
	if (
		( finalout_expected_prev[72] !== 1'bx ) && ( finalout_prev[72] !== finalout_expected_prev[72] )
		&& ((finalout_expected_prev[72] !== last_finalout_exp[72]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[72] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[72] = finalout_expected_prev[72];
	end
	if (
		( finalout_expected_prev[73] !== 1'bx ) && ( finalout_prev[73] !== finalout_expected_prev[73] )
		&& ((finalout_expected_prev[73] !== last_finalout_exp[73]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[73] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[73] = finalout_expected_prev[73];
	end
	if (
		( finalout_expected_prev[74] !== 1'bx ) && ( finalout_prev[74] !== finalout_expected_prev[74] )
		&& ((finalout_expected_prev[74] !== last_finalout_exp[74]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[74] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[74] = finalout_expected_prev[74];
	end
	if (
		( finalout_expected_prev[75] !== 1'bx ) && ( finalout_prev[75] !== finalout_expected_prev[75] )
		&& ((finalout_expected_prev[75] !== last_finalout_exp[75]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[75] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[75] = finalout_expected_prev[75];
	end
	if (
		( finalout_expected_prev[76] !== 1'bx ) && ( finalout_prev[76] !== finalout_expected_prev[76] )
		&& ((finalout_expected_prev[76] !== last_finalout_exp[76]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[76] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[76] = finalout_expected_prev[76];
	end
	if (
		( finalout_expected_prev[77] !== 1'bx ) && ( finalout_prev[77] !== finalout_expected_prev[77] )
		&& ((finalout_expected_prev[77] !== last_finalout_exp[77]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[77] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[77] = finalout_expected_prev[77];
	end
	if (
		( finalout_expected_prev[78] !== 1'bx ) && ( finalout_prev[78] !== finalout_expected_prev[78] )
		&& ((finalout_expected_prev[78] !== last_finalout_exp[78]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[78] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[78] = finalout_expected_prev[78];
	end
	if (
		( finalout_expected_prev[79] !== 1'bx ) && ( finalout_prev[79] !== finalout_expected_prev[79] )
		&& ((finalout_expected_prev[79] !== last_finalout_exp[79]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[79] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[79] = finalout_expected_prev[79];
	end
	if (
		( finalout_expected_prev[80] !== 1'bx ) && ( finalout_prev[80] !== finalout_expected_prev[80] )
		&& ((finalout_expected_prev[80] !== last_finalout_exp[80]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[80] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[80] = finalout_expected_prev[80];
	end
	if (
		( finalout_expected_prev[81] !== 1'bx ) && ( finalout_prev[81] !== finalout_expected_prev[81] )
		&& ((finalout_expected_prev[81] !== last_finalout_exp[81]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[81] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[81] = finalout_expected_prev[81];
	end
	if (
		( finalout_expected_prev[82] !== 1'bx ) && ( finalout_prev[82] !== finalout_expected_prev[82] )
		&& ((finalout_expected_prev[82] !== last_finalout_exp[82]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[82] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[82] = finalout_expected_prev[82];
	end
	if (
		( finalout_expected_prev[83] !== 1'bx ) && ( finalout_prev[83] !== finalout_expected_prev[83] )
		&& ((finalout_expected_prev[83] !== last_finalout_exp[83]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[83] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[83] = finalout_expected_prev[83];
	end
	if (
		( finalout_expected_prev[84] !== 1'bx ) && ( finalout_prev[84] !== finalout_expected_prev[84] )
		&& ((finalout_expected_prev[84] !== last_finalout_exp[84]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[84] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[84] = finalout_expected_prev[84];
	end
	if (
		( finalout_expected_prev[85] !== 1'bx ) && ( finalout_prev[85] !== finalout_expected_prev[85] )
		&& ((finalout_expected_prev[85] !== last_finalout_exp[85]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[85] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[85] = finalout_expected_prev[85];
	end
	if (
		( finalout_expected_prev[86] !== 1'bx ) && ( finalout_prev[86] !== finalout_expected_prev[86] )
		&& ((finalout_expected_prev[86] !== last_finalout_exp[86]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[86] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[86] = finalout_expected_prev[86];
	end
	if (
		( finalout_expected_prev[87] !== 1'bx ) && ( finalout_prev[87] !== finalout_expected_prev[87] )
		&& ((finalout_expected_prev[87] !== last_finalout_exp[87]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[87] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[87] = finalout_expected_prev[87];
	end
	if (
		( finalout_expected_prev[88] !== 1'bx ) && ( finalout_prev[88] !== finalout_expected_prev[88] )
		&& ((finalout_expected_prev[88] !== last_finalout_exp[88]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[88] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[88] = finalout_expected_prev[88];
	end
	if (
		( finalout_expected_prev[89] !== 1'bx ) && ( finalout_prev[89] !== finalout_expected_prev[89] )
		&& ((finalout_expected_prev[89] !== last_finalout_exp[89]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[89] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[89] = finalout_expected_prev[89];
	end
	if (
		( finalout_expected_prev[90] !== 1'bx ) && ( finalout_prev[90] !== finalout_expected_prev[90] )
		&& ((finalout_expected_prev[90] !== last_finalout_exp[90]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[90] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[90] = finalout_expected_prev[90];
	end
	if (
		( finalout_expected_prev[91] !== 1'bx ) && ( finalout_prev[91] !== finalout_expected_prev[91] )
		&& ((finalout_expected_prev[91] !== last_finalout_exp[91]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[91] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[91] = finalout_expected_prev[91];
	end
	if (
		( finalout_expected_prev[92] !== 1'bx ) && ( finalout_prev[92] !== finalout_expected_prev[92] )
		&& ((finalout_expected_prev[92] !== last_finalout_exp[92]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[92] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[92] = finalout_expected_prev[92];
	end
	if (
		( finalout_expected_prev[93] !== 1'bx ) && ( finalout_prev[93] !== finalout_expected_prev[93] )
		&& ((finalout_expected_prev[93] !== last_finalout_exp[93]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[93] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[93] = finalout_expected_prev[93];
	end
	if (
		( finalout_expected_prev[94] !== 1'bx ) && ( finalout_prev[94] !== finalout_expected_prev[94] )
		&& ((finalout_expected_prev[94] !== last_finalout_exp[94]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[94] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[94] = finalout_expected_prev[94];
	end
	if (
		( finalout_expected_prev[95] !== 1'bx ) && ( finalout_prev[95] !== finalout_expected_prev[95] )
		&& ((finalout_expected_prev[95] !== last_finalout_exp[95]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[95] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[95] = finalout_expected_prev[95];
	end
	if (
		( finalout_expected_prev[96] !== 1'bx ) && ( finalout_prev[96] !== finalout_expected_prev[96] )
		&& ((finalout_expected_prev[96] !== last_finalout_exp[96]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[96] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[96] = finalout_expected_prev[96];
	end
	if (
		( finalout_expected_prev[97] !== 1'bx ) && ( finalout_prev[97] !== finalout_expected_prev[97] )
		&& ((finalout_expected_prev[97] !== last_finalout_exp[97]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[97] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[97] = finalout_expected_prev[97];
	end
	if (
		( finalout_expected_prev[98] !== 1'bx ) && ( finalout_prev[98] !== finalout_expected_prev[98] )
		&& ((finalout_expected_prev[98] !== last_finalout_exp[98]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[98] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[98] = finalout_expected_prev[98];
	end
	if (
		( finalout_expected_prev[99] !== 1'bx ) && ( finalout_prev[99] !== finalout_expected_prev[99] )
		&& ((finalout_expected_prev[99] !== last_finalout_exp[99]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[99] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[99] = finalout_expected_prev[99];
	end
	if (
		( finalout_expected_prev[100] !== 1'bx ) && ( finalout_prev[100] !== finalout_expected_prev[100] )
		&& ((finalout_expected_prev[100] !== last_finalout_exp[100]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[100] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[100] = finalout_expected_prev[100];
	end
	if (
		( finalout_expected_prev[101] !== 1'bx ) && ( finalout_prev[101] !== finalout_expected_prev[101] )
		&& ((finalout_expected_prev[101] !== last_finalout_exp[101]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[101] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[101] = finalout_expected_prev[101];
	end
	if (
		( finalout_expected_prev[102] !== 1'bx ) && ( finalout_prev[102] !== finalout_expected_prev[102] )
		&& ((finalout_expected_prev[102] !== last_finalout_exp[102]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[102] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[102] = finalout_expected_prev[102];
	end
	if (
		( finalout_expected_prev[103] !== 1'bx ) && ( finalout_prev[103] !== finalout_expected_prev[103] )
		&& ((finalout_expected_prev[103] !== last_finalout_exp[103]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[103] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[103] = finalout_expected_prev[103];
	end
	if (
		( finalout_expected_prev[104] !== 1'bx ) && ( finalout_prev[104] !== finalout_expected_prev[104] )
		&& ((finalout_expected_prev[104] !== last_finalout_exp[104]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[104] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[104] = finalout_expected_prev[104];
	end
	if (
		( finalout_expected_prev[105] !== 1'bx ) && ( finalout_prev[105] !== finalout_expected_prev[105] )
		&& ((finalout_expected_prev[105] !== last_finalout_exp[105]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[105] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[105] = finalout_expected_prev[105];
	end
	if (
		( finalout_expected_prev[106] !== 1'bx ) && ( finalout_prev[106] !== finalout_expected_prev[106] )
		&& ((finalout_expected_prev[106] !== last_finalout_exp[106]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[106] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[106] = finalout_expected_prev[106];
	end
	if (
		( finalout_expected_prev[107] !== 1'bx ) && ( finalout_prev[107] !== finalout_expected_prev[107] )
		&& ((finalout_expected_prev[107] !== last_finalout_exp[107]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[107] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[107] = finalout_expected_prev[107];
	end
	if (
		( finalout_expected_prev[108] !== 1'bx ) && ( finalout_prev[108] !== finalout_expected_prev[108] )
		&& ((finalout_expected_prev[108] !== last_finalout_exp[108]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[108] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[108] = finalout_expected_prev[108];
	end
	if (
		( finalout_expected_prev[109] !== 1'bx ) && ( finalout_prev[109] !== finalout_expected_prev[109] )
		&& ((finalout_expected_prev[109] !== last_finalout_exp[109]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[109] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[109] = finalout_expected_prev[109];
	end
	if (
		( finalout_expected_prev[110] !== 1'bx ) && ( finalout_prev[110] !== finalout_expected_prev[110] )
		&& ((finalout_expected_prev[110] !== last_finalout_exp[110]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[110] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[110] = finalout_expected_prev[110];
	end
	if (
		( finalout_expected_prev[111] !== 1'bx ) && ( finalout_prev[111] !== finalout_expected_prev[111] )
		&& ((finalout_expected_prev[111] !== last_finalout_exp[111]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[111] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[111] = finalout_expected_prev[111];
	end
	if (
		( finalout_expected_prev[112] !== 1'bx ) && ( finalout_prev[112] !== finalout_expected_prev[112] )
		&& ((finalout_expected_prev[112] !== last_finalout_exp[112]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[112] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[112] = finalout_expected_prev[112];
	end
	if (
		( finalout_expected_prev[113] !== 1'bx ) && ( finalout_prev[113] !== finalout_expected_prev[113] )
		&& ((finalout_expected_prev[113] !== last_finalout_exp[113]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[113] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[113] = finalout_expected_prev[113];
	end
	if (
		( finalout_expected_prev[114] !== 1'bx ) && ( finalout_prev[114] !== finalout_expected_prev[114] )
		&& ((finalout_expected_prev[114] !== last_finalout_exp[114]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[114] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[114] = finalout_expected_prev[114];
	end
	if (
		( finalout_expected_prev[115] !== 1'bx ) && ( finalout_prev[115] !== finalout_expected_prev[115] )
		&& ((finalout_expected_prev[115] !== last_finalout_exp[115]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[115] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[115] = finalout_expected_prev[115];
	end
	if (
		( finalout_expected_prev[116] !== 1'bx ) && ( finalout_prev[116] !== finalout_expected_prev[116] )
		&& ((finalout_expected_prev[116] !== last_finalout_exp[116]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[116] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[116] = finalout_expected_prev[116];
	end
	if (
		( finalout_expected_prev[117] !== 1'bx ) && ( finalout_prev[117] !== finalout_expected_prev[117] )
		&& ((finalout_expected_prev[117] !== last_finalout_exp[117]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[117] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[117] = finalout_expected_prev[117];
	end
	if (
		( finalout_expected_prev[118] !== 1'bx ) && ( finalout_prev[118] !== finalout_expected_prev[118] )
		&& ((finalout_expected_prev[118] !== last_finalout_exp[118]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[118] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[118] = finalout_expected_prev[118];
	end
	if (
		( finalout_expected_prev[119] !== 1'bx ) && ( finalout_prev[119] !== finalout_expected_prev[119] )
		&& ((finalout_expected_prev[119] !== last_finalout_exp[119]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[119] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[119] = finalout_expected_prev[119];
	end
	if (
		( finalout_expected_prev[120] !== 1'bx ) && ( finalout_prev[120] !== finalout_expected_prev[120] )
		&& ((finalout_expected_prev[120] !== last_finalout_exp[120]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[120] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[120] = finalout_expected_prev[120];
	end
	if (
		( finalout_expected_prev[121] !== 1'bx ) && ( finalout_prev[121] !== finalout_expected_prev[121] )
		&& ((finalout_expected_prev[121] !== last_finalout_exp[121]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[121] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[121] = finalout_expected_prev[121];
	end
	if (
		( finalout_expected_prev[122] !== 1'bx ) && ( finalout_prev[122] !== finalout_expected_prev[122] )
		&& ((finalout_expected_prev[122] !== last_finalout_exp[122]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[122] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[122] = finalout_expected_prev[122];
	end
	if (
		( finalout_expected_prev[123] !== 1'bx ) && ( finalout_prev[123] !== finalout_expected_prev[123] )
		&& ((finalout_expected_prev[123] !== last_finalout_exp[123]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[123] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[123] = finalout_expected_prev[123];
	end
	if (
		( finalout_expected_prev[124] !== 1'bx ) && ( finalout_prev[124] !== finalout_expected_prev[124] )
		&& ((finalout_expected_prev[124] !== last_finalout_exp[124]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[124] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[124] = finalout_expected_prev[124];
	end
	if (
		( finalout_expected_prev[125] !== 1'bx ) && ( finalout_prev[125] !== finalout_expected_prev[125] )
		&& ((finalout_expected_prev[125] !== last_finalout_exp[125]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[125] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[125] = finalout_expected_prev[125];
	end
	if (
		( finalout_expected_prev[126] !== 1'bx ) && ( finalout_prev[126] !== finalout_expected_prev[126] )
		&& ((finalout_expected_prev[126] !== last_finalout_exp[126]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[126] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[126] = finalout_expected_prev[126];
	end
	if (
		( finalout_expected_prev[127] !== 1'bx ) && ( finalout_prev[127] !== finalout_expected_prev[127] )
		&& ((finalout_expected_prev[127] !== last_finalout_exp[127]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalout[127] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalout_expected_prev);
		$display ("     Real value = %b", finalout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finalout_exp[127] = finalout_expected_prev[127];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module AES_TOP_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [127:0] startin;
// wires                                               
wire [127:0] finalout;

wire sampler;                             

// assign statements (if any)                          
AES_TOP i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.finalout(finalout),
	.startin(startin)
);

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 

AES_TOP_vlg_sample_tst tb_sample (
	.clk(clk),
	.startin(startin),
	.sampler_tx(sampler)
);

AES_TOP_vlg_check_tst tb_out(
	.finalout(finalout),
	.sampler_rx(sampler)
);
endmodule

